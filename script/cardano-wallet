#!/bin/bash

# ====================================================================
# Main logic of the script
# ==========================================================
main() {
  wallet_dir="$NODE_HOME/wallet/$wallet_id"

  case $operation in
    address)
      if [ ! -d $wallet_dir ]; then
        echo "Wallet $wallet_id doesn't exist at $wallet_dir"
        exit 1
      fi

      wallet_address_file="$wallet_dir/payment.addr"
      if [ ! -f $wallet_address_file ]; then
        echo "Address file for wallet $wallet_id doesn't exist at $wallet_address_file"
        exit 1
      fi

      cat "$wallet_dir/payment.addr"
      ;;
    balance)
      if [ ! -d $wallet_dir ]; then
        echo "Wallet $wallet_id doesn't exist at $wallet_dir"
        exit 1
      fi

      wallet_address_file="$wallet_dir/payment.addr"
      if [ ! -f $wallet_address_file ]; then
        echo "Address file for wallet $wallet_id doesn't exist at $wallet_address_file"
        exit 1
      fi

      
      wallet_address=$(cat $wallet_address_file)

      echo ""
      echo "Wallet $wallet_id: $wallet_address"
      echo ""

      cardano-cli query utxo --address $wallet_address --testnet-magic 5
      ;;
    create)
      if [ -d $wallet_dir ]; then
        echo "Cannot create wallet $wallet_id, because it already exists at $wallet_dir"
        exit 1
      fi

      echo "Creating wallet $wallet_id at $wallet_dir"
      mkdir -p $wallet_dir
      cd $wallet_dir

      # Create payment key pair
      cardano-cli address key-gen \
        --verification-key-file payment.vkey \
        --signing-key-file payment.skey

      # Create staking key pair
      cardano-cli stake-address key-gen \
        --verification-key-file stake.vkey \
        --signing-key-file stake.skey

      # Create staking address
      cardano-cli stake-address build \
        --stake-verification-key-file stake.vkey \
        --out-file stake.addr \
        --testnet-magic 5

      # Create payment address
      cardano-cli address build \
        --payment-verification-key-file payment.vkey \
        --stake-verification-key-file stake.vkey \
        --out-file payment.addr \
        --testnet-magic 5
      ;;
   remove)
      if [ ! -d $wallet_dir ]; then
        echo "Wallet $wallet_id doesn't exist at $wallet_dir"
        exit 0
      fi

      if $yes; then
        confirmation='y'
      else
        read -p "Are you sure you want to remove wallet $wallet_id at $wallet_dir (y/n)? " -n 1 -r confirmation
        echo ""
      fi

      if [[ $confirmation =~ ^[Yy]$ ]]; then
        echo "Removing wallet $wallet_id"
        rm -rf $wallet_dir
      fi
      ;;
    *)
      echo "Programming error: operation '$operation' not implemented."
      exit 9
  esac
}

# ====================================================================
# Parse command-line arguments and the evaluate main()
# ==========================================================

# Specify short and long options
OPTIONS=hqvy
LONGOPTS=help,quiet,verbose,yes

handle_args() {
  # Set defaults for variables
  quiet=false
  verbose=false
  yes=false

  # Handle option args
  while true; do
      case "$1" in
          -h|--help)
              show_help
              exit 0
              ;;
          -v|--verbose)
              verbose=true
              shift
              ;;
          -q|--quiet)
              quiet=true
              shift
              ;;
          -y|--yes)
              yes=true
              shift
              ;;
          --)
              shift
              break
              ;;
          *)
              echo "Unknown options provided: $@"
              exit 51
              ;;
      esac
  done

  # Verbose overrides quiet
  if $verbose; then
    quiet=false
  fi

  # Turn off echo if quiet option enabled
  if $quiet; then
    exec 1>/dev/null # redirect stdout to /dev/null
  fi

  if [[ "$#" -eq 0 ]]; then
    show_help
    exit 0
  fi

  # Handle positional args
  case "$1" in
    address)
      operation="address"
      shift
      wallet_id="$1"
      shift
      ;;
    balance)
      operation="balance"
      shift
      wallet_id="$1"
      shift
      ;;
    create)
      operation="create"
      shift
      wallet_id="$1"
      shift
      ;;
    remove)
      operation="remove"
      shift
      wallet_id="$1"
      shift
      ;;
    *)
      # If no operation provided, then default to 'address'
      if [[ "$#" -eq 1 ]]; then
        operation="address"
        wallet_id="$1"
        shift
      else
        echo "Unknown operation: $@"
        exit 52
      fi
      ;;
  esac

  if [[ "$#" > 0 ]]; then
    echo "Unknown arguments provided for operation '$operation': '$@'"
    exit 53
  fi
}

show_help() {
  # Help message
  echo "$(basename "$0") - example bash script that parses options and parameters from"
  echo "command-line arguments"
  echo ""
  echo "Usage: $(basename "$0") [OPTIONS] OPERATION WALLET_ID"
  echo ""
  echo "Available options:"
  echo "  -h, --help                     display this help message"
  echo "  -q, --quiet                    supress messages from this script"
  echo "  -v, --verbose                  enable verbose mode"
  echo "  -y, --yes                      do not ask for confirmation of destructive operations"
  echo ""
  echo "Operations:"
  echo "  address (default operation)    get the address for the wallet called WALLET_ID"
  echo "  balance                        get the balance for the wallet called WALLET_ID"
  echo "  create                         create a wallet called WALLET_ID"
  echo "  remove                         remove the wallet called WALLET_ID"
}

echoerr (){
  cat <<< "$@" 1>&2;
}

# Test whether getopt works
! getopt --test > /dev/null
if [[ ${PIPESTATUS[0]} -ne 4 ]]; then
  echo "'getopt --test' failed"
  exit 101
fi

# Parse command-line arguments, canonicalizing in-place
! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name "$0" -- "$@")
if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
  echo "Failed to parse arguments"
  exit 102
fi

# Handle arguments
eval handle_args "$PARSED"

# Perform the main program
main
